להסביר על גודוט ולמה בחרנו אותו

בחרנו בגודוט כי היה צורך במנוע משחק בשביל העבודה הזו. וחצי מהכוח העובד של הפרוייקט רצה ללמוד תוכנה של קוד פתוח, ובעיקר להמנע מסיטואציה כמו מה שהיה ליוניטי בסוף 2023 שמפתחי משחקים היו צפויים לשלם ליוניטי ברגע שהמשחק שלהם עובר סף הורדות מסויים. ובנוסף בעקבות ההצלחה הגדולה של תוכנה כמו בלנדר שהיא בעצמה קוד פתוח כנגד גדולות האנימציה ותלת המימד כמו מאיה והודיני, אפשר לראות עתיד לגודוט בעולם פיתוח המשחקים. וזו אחלה הזדמנות לעשות את הצעד הראשון.
בגודוט יש שפת תכנות מובנה שלו שנקראת גודוטסקריפט, GDScript, אבל יש אפשרות להוסיף לגודוט פייתון בתור שפת תכנות.


מה השימוש שלנו בגודוט

בגודוט יצרנו אובייקט תלת מימדי בצורת כדור, אובייקט חסר פיזיקה מובנית שנקרא אובייקט סטטי. על האובייקט הנ"ל הלבשנו תמונה של מפה של כדור הארץ שמשכנו מהאתר של נאס"א. בשביל להציב תחנות קרקע, לאובייקט הראשי של כדור הארץ הוספנו אובייקטים בתור בנים, שלהם הצבנו קואורדינטות מתאימות לפי חישוב מקדים. תחנות הקרקע שבחרנו הן תל-חי, ניו-יורק, ושני הקטבים.
כעת לסיבוב של כדור הארץ פעם ביום בסימולציה, יצרנו במימוש של פונקציית הריצה של כדור הארץ שינוי רדיאלי קבוע מסביב למרכז של כדור הארץ. מכיוון שתחנות הקרקע נמצאות בעולם בתור בנים של אובייקט כדור הארץ, המנוע מסובב אותן ביחד עם כדור הארץ באותו קצב.
למנוע המשחק בגודוט יש משתנה ששולט על זמן הריצה היחסי של המשחק לזמן האמיתי. באמצעות המשתנה הזה יכלנו לגרום לכדור הארץ, ללווינים ולתחנות הקרקע להסתובב יותר מהר ובהתאם אחד לשני בקצבים מתאימים.
את נקודות הציון של הלווינים מצאנו באופן דינאמי על ידי שימוש בספריית sgp4 שבה יש פונקציה שמתרגמת את הTLE של כל לווין למיקום שלו בהינתן זמן. במקרה שלנו הזמן הניתן הוא הזמן הנוכחי, על ידי ספריית datetime. אז בהנתן נקודות הציון של הלווינים פשוט יוצרים אובייקט העתק של לווין שיצרנו מראש בנקודת הציון הניתנת.


בניית הגרף והרצת דייקסטרה

כעת לפי המיקומים הנתונים של הלווינים אפשר ליצור את הגרף, ולשם כך אנחנו צריכים לדעת לגבי כל זוג לווינים אם הם רואים אחד את השני, וכנ"ל לגבי גישה בין לווין לתחנת קרקע.
בשביל ליצור את הקשתות של הגרף בחרנו לסמלץ את שאילתת שדה הראיה על ידי חישוב פיתגורס, שעובד מכיוון שהלווינים נמצאים בערך בגובה אחיד מסביב לכדור הארץ.
למימוש הגרף השתמשנו בספריית dijkstar של פייתון, שבה גם יש פונקציה למציאת המסלול הקצר ביותר בין שני קודקודים.
לאחר מציאת המסלול הקצר ביותר בין שתי תחנות קרקע, היינו צריכים לצייר את המסלול על העולם באופן תלת מימדי, וזה על ידי אובייקט מסוג קו שכבר קיים בגודוט שנמתח בין שתי נקודות. כך עוברים ברצף על כל הקדקודים במסלול הנתון ומציירים בין שני קדקודים עוקבים במסלול קו.

האתגר העיקרי שנתקלנו בו זה מחיקת לווינים שיורדים מתחת לגובה המינימלי שמוגדר בסטארלינק, מכיוון שהיה צריך לקשר בין האובייקטים של הלווינים של גודוט שאנחנו לא בשליטה עליהם ובין הרשימה שלנו שתמיד מתעדכנת. את ההחלטה על ביטול לווינים שוגים מהסימולציה קיבלנו מכיוון שהם גם כן מופיעים בTLE, ואין דרך לדעת על סמך המידע בTLE בלבד אם הלווין לא בשימוש.

